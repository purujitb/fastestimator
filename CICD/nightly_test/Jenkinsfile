def IMAGE_TAG="$BUILD_TAG".toLowerCase()

pipeline {
    agent {label 'master'}
    environment {
        IMAGE_TAG="$IMAGE_TAG"
        DOCKER_DATASET_PATH='/root/fastestimator_data'
        LOCAL_DATASET_PATH='/home/ubuntu/fastestimator_data'
        S3_DATASET_PATH='s3://fastestimator-public/nightly_test'
    }
    stages {
        stage('nightly_test') {
            parallel {
                stage('GPU') {
                    agent {label 'nightly_gpu'}
                    stages {
                        stage('download dataset') {
                            steps {
                                sh 'aws s3 sync $S3_DATASET_PATH $LOCAL_DATASET_PATH --delete'
                            }
                        }
                        stage('run_test') {
                            steps {
                                script {
                                    def customImage = docker.build('$IMAGE_TAG', \
                                                                   '--no-cache - < docker/nightly/Dockerfile.gpu')
                                    try {
                                        customImage.inside('-u root -v $LOCAL_DATASET_PATH:$DOCKER_DATASET_PATH \
                                                        --gpus all --shm-size 50g') {
                                            sh 'bash test/run_nightly_build.sh'
                                        }
                                    }
                                    finally {
                                        sh 'docker rmi "$IMAGE_TAG"'
                                    }
                                }
                            }
                        }
                    }
                }
                stage('CPU') {
                    agent {label 'nightly_cpu'}
                    stages {
                        stage('download_dataset') {
                            steps {
                                sh 'aws s3 sync $S3_DATASET_PATH $LOCAL_DATASET_PATH --delete'
                            }
                        }
                        stage('run_test') {
                            steps {
                                script {
                                    def customImage = docker.build('$IMAGE_TAG', \
                                                                '--no-cache - < docker/nightly/Dockerfile.cpu')
                                    try {
                                        customImage.inside('-u root -v $LOCAL_DATASET_PATH:$DOCKER_DATASET_PATH \
                                                        --shm-size 50g') {
                                            sh 'bash test/run_nightly_build.sh'
                                        }
                                    }
                                    finally {
                                        sh 'docker rmi "$IMAGE_TAG"'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('deploy_pypi') {
            agent {label 'master'}
            steps {
                script {
                    def customImage = docker.build("$IMAGE_TAG", "--no-cache - < docker/nightly/Dockerfile.cpu")
                    try {
                        customImage.inside("-u root") {
                            withCredentials([string(credentialsId: 'pypi_password', variable: 'PYPI_PWD')]) {
                                sh 'pip install -U keyring keyrings.alt'
                                sh 'pip install --no-cache-dir twine'
                                sh 'FASTESTIMATOR_IS_NIGHTLY=1 python setup.py sdist bdist_wheel'
                                sh 'twine upload dist/* -u fastestimatordev -p ${PYPI_PWD}'
                            }
                        }
                    }
                    finally {
                        sh 'docker rmi "$IMAGE_TAG"'
                    }
                }
            }
        }
        stage('deploy_dockerhub') {
            agent {label 'master'}
            steps {
                withDockerRegistry(credentialsId: 'docker_hub_credentials', url:'') {
                    sh 'docker build -t fastestimator/fastestimator:nightly-cpu --no-cache - < docker/nightly/Dockerfile.cpu'
                    sh 'docker push fastestimator/fastestimator:nightly-cpu'
                    sh 'docker build -t fastestimator/fastestimator:nightly-gpu --no-cache - < docker/nightly/Dockerfile.gpu'
                    sh 'docker push fastestimator/fastestimator:nightly-gpu'
                    sh 'docker image prune -f'
                }
            }
        }
    }
}