# Copyright 2019 The FastEstimator Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
import tensorflow as tf
import torch

import fastestimator as fe
from fastestimator.op.tensorop.loss import Loss


class MixUpLoss(Loss):
    """This class should be used in conjunction with MixUpBatch to perform mix-up training, which helps to reduce
    over-fitting, stabilize GAN training, and harden against adversarial attacks (https://arxiv.org/abs/1710.09412)
    Args:
        loss (func): A loss object which can be invoked like "loss(true, pred)". It's reduction method will be
        overridden to 'none'
        lam: The key of the lambda value generated by MixUpBatch
        y_true: ground truth label key
        y_pred: prediction label key
        inputs: A tuple or list like: [<lam>, <y_true>, <y_pred>]
        outputs: Where to store the computed loss value (not required under normal use cases)
        mode: 'train', 'eval', 'test', or None
    """
    def __init__(self, loss, lam=None, y_true=None, y_pred=None, outputs=None, mode=None):
        loss_config = loss.get_config()
        loss_config['reduction'] = 'none'
        super().__init__(inputs=(lam, y_true, y_pred), outputs=outputs, mode=mode)
        self.loss_obj = loss.from_config(loss_config)

    def forward(self, data, state):
        lam, true, pred = data
        loss1 = self.loss_obj(true, pred)
        if tf.is_tensor(true):
            loss2 = self.loss_obj(tf.roll(true, shift=1, axis=0), pred)
        elif isinstance(true, torch.Tensor):
            loss2 = self.loss_obj(torch.roll(true, shift=1, axis=0), pred)
        else:
            raise ValueError("unrecognized data format: {}".format(type(data)))

        return fe.backend.reduce_mean(lam * loss1 + (1.0 - lam) * loss2)
